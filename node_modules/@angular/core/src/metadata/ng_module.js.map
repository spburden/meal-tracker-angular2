{"version":3,"file":"ng_module.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/metadata/ng_module.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;OAEI,EAAC,kBAAkB,EAAW,MAAM,OAAO;AAoBlD;;;;;;;GAOG;AACH,OAAO,IAAM,sBAAsB,GAAmB;IACpD,IAAI,EAAE,iBAAiB;CACxB,CAAC;AAEF;;;;GAIG;AACH,OAAO,IAAM,gBAAgB,GAAmB;IAC9C,IAAI,EAAE,kBAAkB;CACzB,CAAC;AAgBF;;;GAGG;AACH;IAAsC,oCAAkB;IAgHtD,0BAAY,OAAkC;QAAlC,uBAAkC,GAAlC,YAAkC;QAC5C,iFAAiF;QACjF,mFAAmF;QACnF,iBAAO,CAAC;QACR,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC;QACpC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;QACzC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;QAC/C,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QACnC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IACjC,CAAC;IA7FD,sBAAI,uCAAS;QA7Bb;;;;;;;;;;;;;;;;;;;;;;;;;;;;WA4BG;aACH,cAA8B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;;;OAAA;IA8FzD,uBAAC;AAAD,CAAC,AA5HD,CAAsC,kBAAkB,GA4HvD","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectableMetadata, Provider} from '../di';\nimport {Type} from '../type';\n\n/**\n * A wrapper around a module that also includes the providers.\n *\n * @stable\n */\nexport interface ModuleWithProviders {\n  ngModule: Type<any>;\n  providers?: Provider[];\n}\n\n/**\n * Interface for schema definitions in @NgModules.\n *\n * @experimental\n */\nexport interface SchemaMetadata { name: string; }\n\n/**\n * Defines a schema that will allow:\n * - any non-angular elements with a `-` in their name,\n * - any properties on elements with a `-` in their name which is the common rule for custom\n * elements.\n *\n * @stable\n */\nexport const CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata = {\n  name: 'custom-elements'\n};\n\n/**\n * Defines a schema that will allow any property on any element.\n *\n * @experimental\n */\nexport const NO_ERRORS_SCHEMA: SchemaMetadata = {\n  name: 'no-errors-schema'\n};\n\n/**\n * Interface for creating {@link NgModuleMetadata}\n * @stable\n */\nexport interface NgModuleMetadataType {\n  providers?: Provider[];\n  declarations?: Array<Type<any>|any[]>;\n  imports?: Array<Type<any>|ModuleWithProviders|any[]>;\n  exports?: Array<Type<any>|any[]>;\n  entryComponents?: Array<Type<any>|any[]>;\n  bootstrap?: Array<Type<any>|any[]>;\n  schemas?: Array<SchemaMetadata|any[]>;\n}\n\n/**\n * Declares an Angular Module.\n * @stable\n */\nexport class NgModuleMetadata extends InjectableMetadata implements NgModuleMetadataType {\n  /**\n   * Defines the set of injectable objects that are available in the injector\n   * of this module.\n   *\n   * ## Simple Example\n   *\n   * Here is an example of a class that can be injected:\n   *\n   * ```\n   * class Greeter {\n   *    greet(name:string) {\n   *      return 'Hello ' + name + '!';\n   *    }\n   * }\n   *\n   * @NgModule({\n   *   providers: [\n   *     Greeter\n   *   ]\n   * })\n   * class HelloWorld {\n   *   greeter:Greeter;\n   *\n   *   constructor(greeter:Greeter) {\n   *     this.greeter = greeter;\n   *   }\n   * }\n   * ```\n   */\n  get providers(): Provider[] { return this._providers; }\n  private _providers: Provider[];\n\n\n  /**\n   * Specifies a list of directives/pipes that belong to this module.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * @NgModule({\n   *   declarations: [NgFor]\n   * })\n   * class CommonModule {\n   * }\n   * ```\n   */\n  declarations: Array<Type<any>|any[]>;\n\n  /**\n   * Specifies a list of modules whose exported directives/pipes\n   * should be available to templates in this module.\n   * This can also contain {@link ModuleWithProviders}.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * @NgModule({\n   *   imports: [CommonModule]\n   * })\n   * class MainModule {\n   * }\n   * ```\n   */\n  imports: Array<Type<any>|ModuleWithProviders|any[]>;\n\n  /**\n   * Specifies a list of directives/pipes/module that can be used within the template\n   * of any component that is part of an angular module\n   * that imports this angular module.\n   *\n   * ### Example\n   *\n   * ```javascript\n   * @NgModule({\n   *   exports: [NgFor]\n   * })\n   * class CommonModule {\n   * }\n   * ```\n   */\n  exports: Array<Type<any>|any[]>;\n\n  /**\n   * Defines the components that should be compiled as well when\n   * this component is defined. For each components listed here,\n   * Angular will create a {@link ComponentFactory ComponentFactory} and store it in the\n   * {@link ComponentFactoryResolver ComponentFactoryResolver}.\n   */\n  entryComponents: Array<Type<any>|any[]>;\n\n  /**\n   * Defines the components that should be bootstrapped when\n   * this module is bootstrapped. The components listed here\n   * will automatically be added to `entryComponents`.\n   */\n  bootstrap: Array<Type<any>|any[]>;\n\n  /**\n   * Elements and properties that are not angular Components nor Directives have to be declared in\n   * the schema.\n   *\n   * Available schemas:\n   * - `NO_ERRORS_SCHEMA`: any elements and properties are allowed,\n   * - `CUSTOM_ELEMENTS_SCHEMA`: any custom elements (tag name has \"-\") with any properties are\n   *   allowed.\n   *\n   * @security When using one of `NO_ERRORS_SCHEMA` or `CUSTOM_ELEMENTS_SCHEMA` we're trusting that\n   * allowed elements (and its properties) securely escape inputs.\n   */\n  schemas: Array<SchemaMetadata|any[]>;\n\n  constructor(options: NgModuleMetadataType = {}) {\n    // We cannot use destructuring of the constructor argument because `exports` is a\n    // protected symbol in CommonJS and closure tries to aggressively optimize it away.\n    super();\n    this._providers = options.providers;\n    this.declarations = options.declarations;\n    this.imports = options.imports;\n    this.exports = options.exports;\n    this.entryComponents = options.entryComponents;\n    this.bootstrap = options.bootstrap;\n    this.schemas = options.schemas;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}