{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../../modules/@angular/forms/src/model.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {fromPromise} from 'rxjs/observable/fromPromise';\n\nimport {composeAsyncValidators, composeValidators} from './directives/shared';\nimport {AsyncValidatorFn, ValidatorFn} from './directives/validators';\nimport {EventEmitter, Observable} from './facade/async';\nimport {ListWrapper, StringMapWrapper} from './facade/collection';\nimport {isBlank, isPresent, isPromise, isStringMap, normalizeBool} from './facade/lang';\n\n\n\n/**\n * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n */\nexport const VALID = 'VALID';\n\n/**\n * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n */\nexport const INVALID = 'INVALID';\n\n/**\n * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n * errors are not yet available for the input value.\n */\nexport const PENDING = 'PENDING';\n\n/**\n * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n * calculations of validity or value.\n */\nexport const DISABLED = 'DISABLED';\n\nexport function isControl(control: Object): boolean {\n  return control instanceof AbstractControl;\n}\n\nfunction _find(control: AbstractControl, path: Array<string|number>| string, delimiter: string) {\n  if (isBlank(path)) return null;\n\n  if (!(path instanceof Array)) {\n    path = (<string>path).split(delimiter);\n  }\n  if (path instanceof Array && ListWrapper.isEmpty(path)) return null;\n\n  return (<Array<string|number>>path).reduce((v, name) => {\n    if (v instanceof FormGroup) {\n      return isPresent(v.controls[name]) ? v.controls[name] : null;\n    } else if (v instanceof FormArray) {\n      var index = <number>name;\n      return isPresent(v.at(index)) ? v.at(index) : null;\n    } else {\n      return null;\n    }\n  }, control);\n}\n\nfunction toObservable(r: any): Observable<any> {\n  return isPromise(r) ? fromPromise(r) : r;\n}\n\nfunction coerceToValidator(validator: ValidatorFn | ValidatorFn[]): ValidatorFn {\n  return Array.isArray(validator) ? composeValidators(validator) : validator;\n}\n\nfunction coerceToAsyncValidator(asyncValidator: AsyncValidatorFn | AsyncValidatorFn[]):\n    AsyncValidatorFn {\n  return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n}\n\n/**\n * @stable\n */\nexport abstract class AbstractControl {\n  /** @internal */\n  _value: any;\n\n  private _valueChanges: EventEmitter<any>;\n  private _statusChanges: EventEmitter<any>;\n  private _status: string;\n  private _errors: {[key: string]: any};\n  private _pristine: boolean = true;\n  private _touched: boolean = false;\n  private _parent: FormGroup|FormArray;\n  private _asyncValidationSubscription: any;\n\n  constructor(public validator: ValidatorFn, public asyncValidator: AsyncValidatorFn) {}\n\n  get value(): any { return this._value; }\n\n  get status(): string { return this._status; }\n\n  get valid(): boolean { return this._status === VALID; }\n\n  get invalid(): boolean { return this._status === INVALID; }\n\n  /**\n   * Returns the errors of this control.\n   */\n  get errors(): {[key: string]: any} { return this._errors; }\n\n  get pristine(): boolean { return this._pristine; }\n\n  get dirty(): boolean { return !this.pristine; }\n\n  get touched(): boolean { return this._touched; }\n\n  get untouched(): boolean { return !this._touched; }\n\n  get valueChanges(): Observable<any> { return this._valueChanges; }\n\n  get statusChanges(): Observable<any> { return this._statusChanges; }\n\n  get pending(): boolean { return this._status == PENDING; }\n\n  get disabled(): boolean { return this._status === DISABLED; }\n\n  get enabled(): boolean { return this._status !== DISABLED; }\n\n  setAsyncValidators(newValidator: AsyncValidatorFn|AsyncValidatorFn[]): void {\n    this.asyncValidator = coerceToAsyncValidator(newValidator);\n  }\n\n  clearAsyncValidators(): void { this.asyncValidator = null; }\n\n  setValidators(newValidator: ValidatorFn|ValidatorFn[]): void {\n    this.validator = coerceToValidator(newValidator);\n  }\n\n  clearValidators(): void { this.validator = null; }\n\n  markAsTouched({onlySelf}: {onlySelf?: boolean} = {}): void {\n    onlySelf = normalizeBool(onlySelf);\n    this._touched = true;\n\n    if (isPresent(this._parent) && !onlySelf) {\n      this._parent.markAsTouched({onlySelf: onlySelf});\n    }\n  }\n\n  markAsDirty({onlySelf}: {onlySelf?: boolean} = {}): void {\n    onlySelf = normalizeBool(onlySelf);\n    this._pristine = false;\n\n    if (isPresent(this._parent) && !onlySelf) {\n      this._parent.markAsDirty({onlySelf: onlySelf});\n    }\n  }\n\n  markAsPristine({onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._pristine = true;\n\n    this._forEachChild((control: AbstractControl) => { control.markAsPristine({onlySelf: true}); });\n\n    if (isPresent(this._parent) && !onlySelf) {\n      this._parent._updatePristine({onlySelf: onlySelf});\n    }\n  }\n\n  markAsUntouched({onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._touched = false;\n\n    this._forEachChild(\n        (control: AbstractControl) => { control.markAsUntouched({onlySelf: true}); });\n\n    if (isPresent(this._parent) && !onlySelf) {\n      this._parent._updateTouched({onlySelf: onlySelf});\n    }\n  }\n\n  markAsPending({onlySelf}: {onlySelf?: boolean} = {}): void {\n    onlySelf = normalizeBool(onlySelf);\n    this._status = PENDING;\n\n    if (isPresent(this._parent) && !onlySelf) {\n      this._parent.markAsPending({onlySelf: onlySelf});\n    }\n  }\n\n  disable({onlySelf, emitEvent}: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    emitEvent = isPresent(emitEvent) ? emitEvent : true;\n\n    this._status = DISABLED;\n    this._forEachChild((control: AbstractControl) => { control.disable({onlySelf: true}); });\n    this._updateValue();\n\n    if (emitEvent) {\n      this._valueChanges.emit(this._value);\n      this._statusChanges.emit(this._status);\n    }\n\n    this._updateAncestors(onlySelf);\n    this._onDisabledChange(true);\n  }\n\n  enable({onlySelf, emitEvent}: {onlySelf?: boolean, emitEvent?: boolean} = {}): void {\n    this._status = VALID;\n    this._forEachChild((control: AbstractControl) => { control.enable({onlySelf: true}); });\n    this.updateValueAndValidity({onlySelf: true, emitEvent: emitEvent});\n\n    this._updateAncestors(onlySelf);\n    this._onDisabledChange(false);\n  }\n\n  private _updateAncestors(onlySelf: boolean) {\n    if (isPresent(this._parent) && !onlySelf) {\n      this._parent.updateValueAndValidity();\n      this._parent._updatePristine();\n      this._parent._updateTouched();\n    }\n  }\n\n  setParent(parent: FormGroup|FormArray): void { this._parent = parent; }\n\n  abstract setValue(value: any, options?: Object): void;\n\n  abstract patchValue(value: any, options?: Object): void;\n\n  abstract reset(value?: any, options?: Object): void;\n\n  updateValueAndValidity({onlySelf, emitEvent}: {onlySelf?: boolean, emitEvent?: boolean} = {}):\n      void {\n    onlySelf = normalizeBool(onlySelf);\n    emitEvent = isPresent(emitEvent) ? emitEvent : true;\n\n    this._updateValue();\n    this._errors = this._runValidator();\n    const originalStatus = this._status;\n    this._status = this._calculateStatus();\n\n    if (this._status == VALID || this._status == PENDING) {\n      this._runAsyncValidator(emitEvent);\n    }\n\n    if (this._disabledChanged(originalStatus)) {\n      this._updateValue();\n    }\n\n    if (emitEvent) {\n      this._valueChanges.emit(this._value);\n      this._statusChanges.emit(this._status);\n    }\n\n    if (isPresent(this._parent) && !onlySelf) {\n      this._parent.updateValueAndValidity({onlySelf: onlySelf, emitEvent: emitEvent});\n    }\n  }\n\n  /** @internal */\n  _updateTreeValidity({emitEvent}: {emitEvent?: boolean} = {emitEvent: true}) {\n    this._forEachChild((ctrl: AbstractControl) => ctrl._updateTreeValidity({emitEvent}));\n    this.updateValueAndValidity({onlySelf: true, emitEvent});\n  }\n\n  private _runValidator(): {[key: string]: any} {\n    return isPresent(this.validator) ? this.validator(this) : null;\n  }\n\n  private _runAsyncValidator(emitEvent: boolean): void {\n    if (isPresent(this.asyncValidator)) {\n      this._status = PENDING;\n      this._cancelExistingSubscription();\n      var obs = toObservable(this.asyncValidator(this));\n      this._asyncValidationSubscription = obs.subscribe(\n          {next: (res: {[key: string]: any}) => this.setErrors(res, {emitEvent: emitEvent})});\n    }\n  }\n\n  private _cancelExistingSubscription(): void {\n    if (isPresent(this._asyncValidationSubscription)) {\n      this._asyncValidationSubscription.unsubscribe();\n    }\n  }\n\n  private _disabledChanged(originalStatus: string): boolean {\n    return this._status !== originalStatus &&\n        (this._status === DISABLED || originalStatus === DISABLED);\n  }\n\n  /**\n   * Sets errors on a form control.\n   *\n   * This is used when validations are run not automatically, but manually by the user.\n   *\n   * Calling `setErrors` will also update the validity of the parent control.\n   *\n   * ## Usage\n   *\n   * ```\n   * var login = new FormControl(\"someLogin\");\n   * login.setErrors({\n   *   \"notUnique\": true\n   * });\n   *\n   * expect(login.valid).toEqual(false);\n   * expect(login.errors).toEqual({\"notUnique\": true});\n   *\n   * login.updateValue(\"someOtherLogin\");\n   *\n   * expect(login.valid).toEqual(true);\n   * ```\n   */\n  setErrors(errors: {[key: string]: any}, {emitEvent}: {emitEvent?: boolean} = {}): void {\n    emitEvent = isPresent(emitEvent) ? emitEvent : true;\n\n    this._errors = errors;\n    this._updateControlsErrors(emitEvent);\n  }\n\n  get(path: Array<string|number>|string): AbstractControl { return _find(this, path, '.'); }\n\n  getError(errorCode: string, path: string[] = null): any {\n    var control = isPresent(path) && !ListWrapper.isEmpty(path) ? this.get(path) : this;\n    if (isPresent(control) && isPresent(control._errors)) {\n      return StringMapWrapper.get(control._errors, errorCode);\n    } else {\n      return null;\n    }\n  }\n\n  hasError(errorCode: string, path: string[] = null): boolean {\n    return isPresent(this.getError(errorCode, path));\n  }\n\n  get root(): AbstractControl {\n    let x: AbstractControl = this;\n\n    while (isPresent(x._parent)) {\n      x = x._parent;\n    }\n\n    return x;\n  }\n\n  /** @internal */\n  _updateControlsErrors(emitEvent: boolean): void {\n    this._status = this._calculateStatus();\n\n    if (emitEvent) {\n      this._statusChanges.emit(this._status);\n    }\n\n    if (isPresent(this._parent)) {\n      this._parent._updateControlsErrors(emitEvent);\n    }\n  }\n\n  /** @internal */\n  _initObservables() {\n    this._valueChanges = new EventEmitter();\n    this._statusChanges = new EventEmitter();\n  }\n\n\n  private _calculateStatus(): string {\n    if (isPresent(this._errors)) return INVALID;\n    if (this._anyControlsHaveStatus(PENDING)) return PENDING;\n    if (this._anyControlsHaveStatus(INVALID)) return INVALID;\n    if (this._allControlsDisabled()) return DISABLED;\n    return VALID;\n  }\n\n  /** @internal */\n  abstract _updateValue(): void;\n\n  /** @internal */\n  abstract _forEachChild(cb: Function): void;\n\n  /** @internal */\n  abstract _anyControls(condition: Function): boolean;\n\n  /** @internal */\n  abstract _allControlsDisabled(): boolean;\n\n  /** @internal */\n  _anyControlsHaveStatus(status: string): boolean {\n    return this._anyControls((control: AbstractControl) => control.status == status);\n  }\n\n  /** @internal */\n  _anyControlsDirty(): boolean {\n    return this._anyControls((control: AbstractControl) => control.dirty);\n  }\n\n  /** @internal */\n  _anyControlsTouched(): boolean {\n    return this._anyControls((control: AbstractControl) => control.touched);\n  }\n\n  /** @internal */\n  _updatePristine({onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._pristine = !this._anyControlsDirty();\n\n    if (isPresent(this._parent) && !onlySelf) {\n      this._parent._updatePristine({onlySelf: onlySelf});\n    }\n  }\n\n  /** @internal */\n  _updateTouched({onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._touched = this._anyControlsTouched();\n\n    if (isPresent(this._parent) && !onlySelf) {\n      this._parent._updateTouched({onlySelf: onlySelf});\n    }\n  }\n\n  /** @internal */\n  _onDisabledChange(isDisabled: boolean): void {}\n\n  /** @internal */\n  _isBoxedValue(formState: any): boolean {\n    return isStringMap(formState) && Object.keys(formState).length === 2 && 'value' in formState &&\n        'disabled' in formState;\n  }\n}\n\n/**\n * Defines a part of a form that cannot be divided into other controls. `FormControl`s have values\n * and\n * validation state, which is determined by an optional validation function.\n *\n * `FormControl` is one of the three fundamental building blocks used to define forms in Angular,\n * along\n * with {@link FormGroup} and {@link FormArray}.\n *\n * ## Usage\n *\n * By default, a `FormControl` is created for every `<input>` or other form component.\n * With {@link FormControlDirective} or {@link FormGroupDirective} an existing {@link FormControl}\n * can be bound to a DOM element instead. This `FormControl` can be configured with a custom\n * validation function.\n *\n * @stable\n */\nexport class FormControl extends AbstractControl {\n  /** @internal */\n  _onChange: Function[] = [];\n\n  constructor(\n      formState: any = null, validator: ValidatorFn|ValidatorFn[] = null,\n      asyncValidator: AsyncValidatorFn|AsyncValidatorFn[] = null) {\n    super(coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n    this._applyFormState(formState);\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n    this._initObservables();\n  }\n\n  /**\n   * Set the value of the form control to `value`.\n   *\n   * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n   * and not its parent component. If `emitEvent` is `true`, this change will cause a\n   * `valueChanges` event on the `FormControl` to be emitted. Both of these options default to\n   * `false`.\n   *\n   * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n   * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n   * specified.\n   *\n   * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n   * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n   */\n  setValue(value: any, {onlySelf, emitEvent, emitModelToViewChange, emitViewToModelChange}: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void {\n    emitModelToViewChange = isPresent(emitModelToViewChange) ? emitModelToViewChange : true;\n    emitViewToModelChange = isPresent(emitViewToModelChange) ? emitViewToModelChange : true;\n\n    this._value = value;\n    if (this._onChange.length && emitModelToViewChange) {\n      this._onChange.forEach((changeFn) => changeFn(this._value, emitViewToModelChange));\n    }\n    this.updateValueAndValidity({onlySelf: onlySelf, emitEvent: emitEvent});\n  }\n\n  /**\n   * This function is functionally the same as updateValue() at this level.  It exists for\n   * symmetry with patchValue() on FormGroups and FormArrays, where it does behave differently.\n   */\n  patchValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  } = {}): void {\n    this.setValue(value, options);\n  }\n\n  reset(formState: any = null, {onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._applyFormState(formState);\n    this.markAsPristine({onlySelf});\n    this.markAsUntouched({onlySelf});\n    this.setValue(this._value, {onlySelf});\n  }\n\n  /**\n   * @internal\n   */\n  _updateValue() {}\n\n  /**\n   * @internal\n   */\n  _anyControls(condition: Function): boolean { return false; }\n\n  /**\n   * @internal\n   */\n  _allControlsDisabled(): boolean { return this.disabled; }\n\n  /**\n   * Register a listener for change events.\n   */\n  registerOnChange(fn: Function): void { this._onChange.push(fn); }\n\n  /**\n   * @internal\n   */\n  _clearChangeFns(): void {\n    this._onChange = [];\n    this._onDisabledChange = null;\n  }\n\n  /**\n   * Register a listener for disabled events.\n   */\n  registerOnDisabledChange(fn: (isDisabled: boolean) => void): void { this._onDisabledChange = fn; }\n\n  /**\n   * @internal\n   */\n  _forEachChild(cb: Function): void {}\n\n  private _applyFormState(formState: any) {\n    if (this._isBoxedValue(formState)) {\n      this._value = formState.value;\n      formState.disabled ? this.disable({onlySelf: true, emitEvent: false}) :\n                           this.enable({onlySelf: true, emitEvent: false});\n    } else {\n      this._value = formState;\n    }\n  }\n}\n\n/**\n * Defines a part of a form, of fixed length, that can contain other controls.\n *\n * A `FormGroup` aggregates the values of each {@link FormControl} in the group.\n * The status of a `FormGroup` depends on the status of its children.\n * If one of the controls in a group is invalid, the entire group is invalid.\n * Similarly, if a control changes its value, the entire group changes as well.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {@link FormControl} and {@link FormArray}. {@link FormArray} can also contain other\n * controls, but is of variable length.\n *\n *\n * @stable\n */\nexport class FormGroup extends AbstractControl {\n  constructor(\n      public controls: {[key: string]: AbstractControl}, validator: ValidatorFn = null,\n      asyncValidator: AsyncValidatorFn = null) {\n    super(validator, asyncValidator);\n    this._initObservables();\n    this._setParentForControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n\n  /**\n   * Register a control with the group's list of controls.\n   */\n  registerControl(name: string, control: AbstractControl): AbstractControl {\n    if (this.controls[name]) return this.controls[name];\n    this.controls[name] = control;\n    control.setParent(this);\n    return control;\n  }\n\n  /**\n   * Add a control to this group.\n   */\n  addControl(name: string, control: AbstractControl): void {\n    this.registerControl(name, control);\n    this.updateValueAndValidity();\n  }\n\n  /**\n   * Remove a control from this group.\n   */\n  removeControl(name: string): void {\n    StringMapWrapper.delete(this.controls, name);\n    this.updateValueAndValidity();\n  }\n\n  /**\n   * Check whether there is a control with the given name in the group.\n   */\n  contains(controlName: string): boolean {\n    const c = StringMapWrapper.contains(this.controls, controlName);\n    return c && this.get(controlName).enabled;\n  }\n\n  setValue(value: {[key: string]: any}, {onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._checkAllValuesPresent(value);\n    StringMapWrapper.forEach(value, (newValue: any, name: string) => {\n      this._throwIfControlMissing(name);\n      this.controls[name].setValue(newValue, {onlySelf: true});\n    });\n    this.updateValueAndValidity({onlySelf: onlySelf});\n  }\n\n  patchValue(value: {[key: string]: any}, {onlySelf}: {onlySelf?: boolean} = {}): void {\n    StringMapWrapper.forEach(value, (newValue: any, name: string) => {\n      if (this.controls[name]) {\n        this.controls[name].patchValue(newValue, {onlySelf: true});\n      }\n    });\n    this.updateValueAndValidity({onlySelf: onlySelf});\n  }\n\n  reset(value: any = {}, {onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._forEachChild((control: AbstractControl, name: string) => {\n      control.reset(value[name], {onlySelf: true});\n    });\n    this.updateValueAndValidity({onlySelf: onlySelf});\n    this._updatePristine({onlySelf: onlySelf});\n    this._updateTouched({onlySelf: onlySelf});\n  }\n\n  getRawValue(): Object {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          acc[name] = control.value;\n          return acc;\n        });\n  }\n\n  /** @internal */\n  _throwIfControlMissing(name: string): void {\n    if (!Object.keys(this.controls).length) {\n      throw new Error(`\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n    }\n    if (!this.controls[name]) {\n      throw new Error(`Cannot find form control with name: ${name}.`);\n    }\n  }\n\n  /** @internal */\n  _forEachChild(cb: (v: any, k: string) => void): void {\n    StringMapWrapper.forEach(this.controls, cb);\n  }\n\n  /** @internal */\n  _setParentForControls() {\n    this._forEachChild((control: AbstractControl, name: string) => { control.setParent(this); });\n  }\n\n  /** @internal */\n  _updateValue() { this._value = this._reduceValue(); }\n\n  /** @internal */\n  _anyControls(condition: Function): boolean {\n    var res = false;\n    this._forEachChild((control: AbstractControl, name: string) => {\n      res = res || (this.contains(name) && condition(control));\n    });\n    return res;\n  }\n\n  /** @internal */\n  _reduceValue() {\n    return this._reduceChildren(\n        {}, (acc: {[k: string]: AbstractControl}, control: AbstractControl, name: string) => {\n          if (control.enabled || this.disabled) {\n            acc[name] = control.value;\n          }\n          return acc;\n        });\n  }\n\n  /** @internal */\n  _reduceChildren(initValue: any, fn: Function) {\n    var res = initValue;\n    this._forEachChild(\n        (control: AbstractControl, name: string) => { res = fn(res, control, name); });\n    return res;\n  }\n\n  /** @internal */\n  _allControlsDisabled(): boolean {\n    for (let controlName of Object.keys(this.controls)) {\n      if (this.controls[controlName].enabled) {\n        return false;\n      }\n    }\n    return !StringMapWrapper.isEmpty(this.controls);\n  }\n\n  /** @internal */\n  _checkAllValuesPresent(value: any): void {\n    this._forEachChild((control: AbstractControl, name: string) => {\n      if (value[name] === undefined) {\n        throw new Error(`Must supply a value for form control with name: '${name}'.`);\n      }\n    });\n  }\n}\n\n/**\n * Defines a part of a form, of variable length, that can contain other controls.\n *\n * A `FormArray` aggregates the values of each {@link FormControl} in the group.\n * The status of a `FormArray` depends on the status of its children.\n * If one of the controls in a group is invalid, the entire array is invalid.\n * Similarly, if a control changes its value, the entire array changes as well.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with {@link FormControl} and {@link FormGroup}. {@link FormGroup} can also contain\n * other controls, but is of fixed length.\n *\n * ## Adding or removing controls\n *\n * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that will result in strange and unexpected behavior such\n * as broken change detection.\n *\n *\n * @stable\n */\nexport class FormArray extends AbstractControl {\n  constructor(\n      public controls: AbstractControl[], validator: ValidatorFn = null,\n      asyncValidator: AsyncValidatorFn = null) {\n    super(validator, asyncValidator);\n    this._initObservables();\n    this._setParentForControls();\n    this.updateValueAndValidity({onlySelf: true, emitEvent: false});\n  }\n\n  /**\n   * Get the {@link AbstractControl} at the given `index` in the array.\n   */\n  at(index: number): AbstractControl { return this.controls[index]; }\n\n  /**\n   * Insert a new {@link AbstractControl} at the end of the array.\n   */\n  push(control: AbstractControl): void {\n    this.controls.push(control);\n    control.setParent(this);\n    this.updateValueAndValidity();\n  }\n\n  /**\n   * Insert a new {@link AbstractControl} at the given `index` in the array.\n   */\n  insert(index: number, control: AbstractControl): void {\n    ListWrapper.insert(this.controls, index, control);\n    control.setParent(this);\n    this.updateValueAndValidity();\n  }\n\n  /**\n   * Remove the control at the given `index` in the array.\n   */\n  removeAt(index: number): void {\n    ListWrapper.removeAt(this.controls, index);\n    this.updateValueAndValidity();\n  }\n\n  /**\n   * Length of the control array.\n   */\n  get length(): number { return this.controls.length; }\n\n  setValue(value: any[], {onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._checkAllValuesPresent(value);\n    value.forEach((newValue: any, index: number) => {\n      this._throwIfControlMissing(index);\n      this.at(index).setValue(newValue, {onlySelf: true});\n    });\n    this.updateValueAndValidity({onlySelf: onlySelf});\n  }\n\n  patchValue(value: any[], {onlySelf}: {onlySelf?: boolean} = {}): void {\n    value.forEach((newValue: any, index: number) => {\n      if (this.at(index)) {\n        this.at(index).patchValue(newValue, {onlySelf: true});\n      }\n    });\n    this.updateValueAndValidity({onlySelf: onlySelf});\n  }\n\n  reset(value: any = [], {onlySelf}: {onlySelf?: boolean} = {}): void {\n    this._forEachChild((control: AbstractControl, index: number) => {\n      control.reset(value[index], {onlySelf: true});\n    });\n    this.updateValueAndValidity({onlySelf: onlySelf});\n    this._updatePristine({onlySelf: onlySelf});\n    this._updateTouched({onlySelf: onlySelf});\n  }\n\n  getRawValue(): any[] { return this.controls.map((control) => control.value); }\n\n  /** @internal */\n  _throwIfControlMissing(index: number): void {\n    if (!this.controls.length) {\n      throw new Error(`\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n    }\n    if (!this.at(index)) {\n      throw new Error(`Cannot find form control at index ${index}`);\n    }\n  }\n\n  /** @internal */\n  _forEachChild(cb: Function): void {\n    this.controls.forEach((control: AbstractControl, index: number) => { cb(control, index); });\n  }\n\n  /** @internal */\n  _updateValue(): void {\n    this._value = this.controls.filter((control) => control.enabled || this.disabled)\n                      .map((control) => control.value);\n  }\n\n  /** @internal */\n  _anyControls(condition: Function): boolean {\n    return this.controls.some((control: AbstractControl) => control.enabled && condition(control));\n  }\n\n  /** @internal */\n  _setParentForControls(): void {\n    this._forEachChild((control: AbstractControl) => { control.setParent(this); });\n  }\n\n  /** @internal */\n  _checkAllValuesPresent(value: any): void {\n    this._forEachChild((control: AbstractControl, i: number) => {\n      if (value[i] === undefined) {\n        throw new Error(`Must supply a value for form control at index: ${i}.`);\n      }\n    });\n  }\n\n  /** @internal */\n  _allControlsDisabled(): boolean {\n    for (let control of this.controls) {\n      if (control.enabled) return false;\n    }\n    return !!this.controls.length;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}