{"version":3,"file":"form_group_directive.js","sourceRoot":"","sources":["../../../../../../modules/@angular/forms/src/directives/reactive_directives/form_group_directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Inject, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {EventEmitter} from '../../facade/async';\nimport {ListWrapper, StringMapWrapper} from '../../facade/collection';\nimport {isBlank} from '../../facade/lang';\nimport {FormArray, FormControl, FormGroup} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS, Validators} from '../../validators';\nimport {ControlContainer} from '../control_container';\nimport {Form} from '../form_interface';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {cleanUpControl, composeAsyncValidators, composeValidators, setUpControl, setUpFormContainer} from '../shared';\n\nimport {FormArrayName, FormGroupName} from './form_group_name';\n\nexport const formDirectiveProvider: any = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupDirective)\n};\n\n/**\n * Binds an existing form group to a DOM element.  It requires importing the {@link\n * ReactiveFormsModule}.\n *\n * In this example, we bind the form group to the form element, and we bind the login and\n * password controls to the login and password elements.\n *\n *  ```typescript\n * @Component({\n *   selector: 'my-app',\n *   template: `\n *     <div>\n *       <h2>Binding an existing form group</h2>\n *       <form [formGroup]=\"loginForm\">\n *         <p>Login: <input type=\"text\" formControlName=\"login\"></p>\n *         <p>Password: <input type=\"password\" formControlName=\"password\"></p>\n *       </form>\n *       <p>Value:</p>\n *       <pre>{{ loginForm.value | json}}</pre>\n *     </div>\n *   `\n * })\n * export class App {\n *   loginForm: FormGroup;\n *\n *   constructor() {\n *     this.loginForm = new FormGroup({\n *       login: new FormControl(\"\"),\n *       password: new FormControl(\"\")\n *     });\n *   }\n *\n * }\n *  ```\n *\n * We can also use setValue() to populate the form programmatically.\n *\n *  ```typescript\n * @Component({\n *      selector: \"login-comp\",\n *      template: `\n *        <form [formGroup]='loginForm'>\n *          Login <input type='text' formControlName='login'>\n *          Password <input type='password' formControlName='password'>\n *          <button (click)=\"onLogin()\">Login</button>\n *        </form>`\n *      })\n * class LoginComp {\n *  loginForm: FormGroup;\n *\n *  constructor() {\n *    this.loginForm = new FormGroup({\n *      login: new FormControl(''),\n *      password: new FormControl('')\n *    });\n *  }\n *\n *  populate() {\n *    this.loginForm.setValue({ login: 'some login', password: 'some password'});\n *  }\n *\n *  onLogin(): void {\n *    // this.credentials.login === 'some login'\n *    // this.credentials.password === 'some password'\n *  }\n * }\n *  ```\n *\n *  @stable\n */\n\nexport class FormGroupDirective extends ControlContainer implements Form,\n    OnChanges {\n  private _submitted: boolean = false;\n  directives: NgControl[] = [];\n\n   form: FormGroup = null;\n   ngSubmit = new EventEmitter();\n\n  constructor(\n         private _validators: any[],\n         private _asyncValidators: any[]) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this._checkFormPresent();\n    if (StringMapWrapper.contains(changes, 'form')) {\n      var sync = composeValidators(this._validators);\n      this.form.validator = Validators.compose([this.form.validator, sync]);\n\n      var async = composeAsyncValidators(this._asyncValidators);\n      this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n      this._updateDomValue(changes);\n    }\n  }\n\n  get submitted(): boolean { return this._submitted; }\n\n  get formDirective(): Form { return this; }\n\n  get control(): FormGroup { return this.form; }\n\n  get path(): string[] { return []; }\n\n  addControl(dir: NgControl): void {\n    const ctrl: any = this.form.get(dir.path);\n    setUpControl(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n    this.directives.push(dir);\n  }\n\n  getControl(dir: NgControl): FormControl { return <FormControl>this.form.get(dir.path); }\n\n  removeControl(dir: NgControl): void { ListWrapper.remove(this.directives, dir); }\n\n  addFormGroup(dir: FormGroupName): void {\n    var ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  removeFormGroup(dir: FormGroupName): void {}\n\n  getFormGroup(dir: FormGroupName): FormGroup { return <FormGroup>this.form.get(dir.path); }\n\n  addFormArray(dir: FormArrayName): void {\n    var ctrl: any = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir);\n    ctrl.updateValueAndValidity({emitEvent: false});\n  }\n\n  removeFormArray(dir: FormArrayName): void {}\n\n  getFormArray(dir: FormArrayName): FormArray { return <FormArray>this.form.get(dir.path); }\n\n  updateModel(dir: NgControl, value: any): void {\n    var ctrl  = <FormControl>this.form.get(dir.path);\n    ctrl.setValue(value);\n  }\n\n  onSubmit(): boolean {\n    this._submitted = true;\n    this.ngSubmit.emit(null);\n    return false;\n  }\n\n  onReset(): void { this.resetForm(); }\n\n  resetForm(value: any = undefined): void {\n    this.form.reset(value);\n    this._submitted = false;\n  }\n\n  /** @internal */\n  _updateDomValue(changes: SimpleChanges) {\n    const oldForm = changes['form'].previousValue;\n\n    this.directives.forEach(dir => {\n      const newCtrl: any = this.form.get(dir.path);\n      const oldCtrl = oldForm.get(dir.path);\n      if (oldCtrl !== newCtrl) {\n        cleanUpControl(oldCtrl, dir);\n        if (newCtrl) setUpControl(newCtrl, dir);\n      }\n    });\n\n    this.form._updateTreeValidity({emitEvent: false});\n  }\n\n  private _checkFormPresent() {\n    if (isBlank(this.form)) {\n      ReactiveErrors.missingFormException();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[formGroup]',\n  providers: [formDirectiveProvider],\n  host: {'(submit)': 'onSubmit()', '(reset)': 'onReset()'},\n  exportAs: 'ngForm'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'form': [{ type: Input, args: ['formGroup', ] },],\n'ngSubmit': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}